def check_args(args):
    def fmt_time(seconds, granularity=2):
        intervals = [("d", 86400),    # 60 * 60 * 24
                    ("h", 3600),    # 60 * 60
                    ("m", 60),
                    ("s", 1)]
        result = []
        for name, count in intervals:
            value = int(seconds // count)
            if value:
                seconds -= value * count
                if value == 1:
                    name = name.rstrip("s")
                result.append(f"{value}{name}")
        t = " ".join(result[:granularity])
        return t + " s"

   # Use the USB device name, defaulting to ttyUSB0 if not provided
    usb_port = args.usb if args.usb else "ttyUSB0"

    if args.usb:
        print(f"trying to use {args.usb}")
        usb_port = args.usb
    else:
        print("using standard USB ttyUSB0")
        usb_port = "ttyUSB0"

    # a mux must be selected:
    if args.mux is None or args.mux not in mux_dict.keys():
        print("a valid mux must be chosen. Aborting!")
        exit()
    else:
        print(f"Choosing mux: {args.mux}")
        mux = args.mux

    if args.zero:
        print("Zeroing all scales.")
        zero = True
        return usb_port, mux, False, False, False, zero
    else:
        zero = False


    # Check if at least one of -n or -t is provided
    if args.measurements is None:
            measurements = 0
    else:
        try:
            measurements = args.measurements
        except Exception as E:
            print("Error with number of measurements -> could not process", E)
            exit()
    if args.granularity is None:
        print("Error: You must provide -g (granularity)")
        exit()  # Exit the script with a non-zero status
    else:
        try:
            granularity = int(args.granularity)
        except Exception as E:
            print("Error with number of measurements -> could not process", E)
            exit()
    
    if measurements > 0:
        print(f"{measurements} will be done, one every {granularity} seconds - this will take approx { fmt_time(measurements * granularity)}")
    else:
        print(f"measurements will be done continuosly, one every {granularity} seconds")

    
    # If no mutually exclusive options are provided, default to verbose
    if not (args.influx or args.csv):
        output_method = "terminal"
        print("Outputting values to terminal.")
    elif args.influx:
        print(f"Writing data continuously to InfluxDB into bucket {bucket}")
        output_method = "influx"
    elif args.csv:
        print(f"Writing data to CSV file")
        output_method = "csv"
    return usb_port, mux, output_method, measurements, granularity, zero
